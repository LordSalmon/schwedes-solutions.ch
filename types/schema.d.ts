/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
    "/assets/{id}": {
        /**
         * Get an Asset
         * @description Image typed files can be dynamically resized and transformed to fit any need.
         */
        get: operations["getAsset"];
    };
    "/auth/login": {
        /**
         * Retrieve a Temporary Access Token
         * @description Retrieve a Temporary Access Token
         */
        post: operations["login"];
    };
    "/auth/refresh": {
        /**
         * Refresh Token
         * @description Refresh a Temporary Access Token.
         */
        post: operations["refresh"];
    };
    "/auth/logout": {
        /**
         * Log Out
         * @description Log Out
         */
        post: operations["logout"];
    };
    "/auth/password/request": {
        /**
         * Request a Password Reset
         * @description Request a reset password email to be send.
         */
        post: operations["passwordRequest"];
    };
    "/auth/password/reset": {
        /**
         * Reset a Password
         * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
         */
        post: operations["passwordReset"];
    };
    "/auth/oauth": {
        /**
         * List OAuth Providers
         * @description List configured OAuth providers.
         */
        get: operations["oauth"];
    };
    "/auth/oauth/{provider}": {
        /**
         * Authenticated using an OAuth provider
         * @description Start OAuth flow using the specified provider
         */
        get: operations["oauthProvider"];
    };
    "/server/info": {
        /**
         * System Info
         * @description Perform a system status check and return the options.
         */
        get: operations["serverInfo"];
    };
    "/server/ping": {
        /**
         * Ping
         * @description Ping, pong. Ping.. pong.
         */
        get: operations["ping"];
    };
    "/files": {
        /**
         * List Files
         * @description List the files.
         */
        get: operations["getFiles"];
    };
    "/files/{id}": {
        /**
         * Retrieve a Files
         * @description Retrieve a single file by unique identifier.
         */
        get: operations["getFile"];
    };
    "/items/articles_translations": {
        /**
         * List Items
         * @description List the articles_translations items.
         */
        get: operations["readItemsArticlesTranslations"];
    };
    "/items/articles_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single articles_translations item by unique identifier.
         */
        get: operations["readSingleItemsArticlesTranslations"];
    };
    "/items/articles_articles": {
        /**
         * List Items
         * @description List the articles_articles items.
         */
        get: operations["readItemsArticlesArticles"];
    };
    "/items/articles_articles/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single articles_articles item by unique identifier.
         */
        get: operations["readSingleItemsArticlesArticles"];
    };
    "/items/articles_files": {
        /**
         * List Items
         * @description List the articles_files items.
         */
        get: operations["readItemsArticlesFiles"];
    };
    "/items/articles_files/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single articles_files item by unique identifier.
         */
        get: operations["readSingleItemsArticlesFiles"];
    };
    "/items/articles": {
        /**
         * List Items
         * @description List the articles items.
         */
        get: operations["readItemsArticles"];
    };
    "/items/articles/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single articles item by unique identifier.
         */
        get: operations["readSingleItemsArticles"];
    };
    "/items/projects": {
        /**
         * List Items
         * @description List the projects items.
         */
        get: operations["readItemsProjects"];
    };
    "/items/projects/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single projects item by unique identifier.
         */
        get: operations["readSingleItemsProjects"];
    };
    "/items/privacy": {
        /**
         * List Items
         * @description List the privacy items.
         */
        get: operations["readItemsPrivacy"];
    };
    "/items/privacy/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single privacy item by unique identifier.
         */
        get: operations["readSingleItemsPrivacy"];
    };
    "/items/references_translations": {
        /**
         * List Items
         * @description List the references_translations items.
         */
        get: operations["readItemsReferencesTranslations"];
    };
    "/items/references_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single references_translations item by unique identifier.
         */
        get: operations["readSingleItemsReferencesTranslations"];
    };
    "/items/privacy_translations": {
        /**
         * List Items
         * @description List the privacy_translations items.
         */
        get: operations["readItemsPrivacyTranslations"];
    };
    "/items/privacy_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single privacy_translations item by unique identifier.
         */
        get: operations["readSingleItemsPrivacyTranslations"];
    };
    "/items/projects_translations": {
        /**
         * List Items
         * @description List the projects_translations items.
         */
        get: operations["readItemsProjectsTranslations"];
    };
    "/items/projects_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single projects_translations item by unique identifier.
         */
        get: operations["readSingleItemsProjectsTranslations"];
    };
    "/items/imprint_translations": {
        /**
         * List Items
         * @description List the imprint_translations items.
         */
        get: operations["readItemsImprintTranslations"];
    };
    "/items/imprint_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single imprint_translations item by unique identifier.
         */
        get: operations["readSingleItemsImprintTranslations"];
    };
    "/items/imprint": {
        /**
         * List Items
         * @description List the imprint items.
         */
        get: operations["readItemsImprint"];
    };
    "/items/imprint/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single imprint item by unique identifier.
         */
        get: operations["readSingleItemsImprint"];
    };
    "/items/contact": {
        /**
         * List Items
         * @description List the contact items.
         */
        get: operations["readItemsContact"];
    };
    "/items/contact/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single contact item by unique identifier.
         */
        get: operations["readSingleItemsContact"];
    };
    "/items/references_files": {
        /**
         * List Items
         * @description List the references_files items.
         */
        get: operations["readItemsReferencesFiles"];
    };
    "/items/references_files/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single references_files item by unique identifier.
         */
        get: operations["readSingleItemsReferencesFiles"];
    };
    "/items/references": {
        /**
         * List Items
         * @description List the references items.
         */
        get: operations["readItemsReferences"];
    };
    "/items/references/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single references item by unique identifier.
         */
        get: operations["readSingleItemsReferences"];
    };
    "/items/reports": {
        /**
         * List Items
         * @description List the reports items.
         */
        get: operations["readItemsReports"];
    };
    "/items/reports/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single reports item by unique identifier.
         */
        get: operations["readSingleItemsReports"];
    };
    "/items/reports_translations": {
        /**
         * List Items
         * @description List the reports_translations items.
         */
        get: operations["readItemsReportsTranslations"];
    };
    "/items/reports_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single reports_translations item by unique identifier.
         */
        get: operations["readSingleItemsReportsTranslations"];
    };
    "/items/processes": {
        /**
         * List Items
         * @description List the processes items.
         */
        get: operations["readItemsProcesses"];
    };
    "/items/processes/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single processes item by unique identifier.
         */
        get: operations["readSingleItemsProcesses"];
    };
    "/items/statistics": {
        /**
         * List Items
         * @description List the statistics items.
         */
        get: operations["readItemsStatistics"];
    };
    "/items/statistics/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single statistics item by unique identifier.
         */
        get: operations["readSingleItemsStatistics"];
    };
    "/items/programming_tools": {
        /**
         * List Items
         * @description List the programming_tools items.
         */
        get: operations["readItemsProgrammingTools"];
    };
    "/items/programming_tools/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single programming_tools item by unique identifier.
         */
        get: operations["readSingleItemsProgrammingTools"];
    };
    "/items/texts_translations": {
        /**
         * List Items
         * @description List the texts_translations items.
         */
        get: operations["readItemsTextsTranslations"];
    };
    "/items/texts_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single texts_translations item by unique identifier.
         */
        get: operations["readSingleItemsTextsTranslations"];
    };
    "/items/texts": {
        /**
         * List Items
         * @description List the texts items.
         */
        get: operations["readItemsTexts"];
    };
    "/items/texts/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single texts item by unique identifier.
         */
        get: operations["readSingleItemsTexts"];
    };
    "/items/alerts_translations": {
        /**
         * List Items
         * @description List the alerts_translations items.
         */
        get: operations["readItemsAlertsTranslations"];
    };
    "/items/alerts_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single alerts_translations item by unique identifier.
         */
        get: operations["readSingleItemsAlertsTranslations"];
    };
    "/items/processes_translations": {
        /**
         * List Items
         * @description List the processes_translations items.
         */
        get: operations["readItemsProcessesTranslations"];
    };
    "/items/processes_translations/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single processes_translations item by unique identifier.
         */
        get: operations["readSingleItemsProcessesTranslations"];
    };
    "/items/alerts": {
        /**
         * List Items
         * @description List the alerts items.
         */
        get: operations["readItemsAlerts"];
    };
    "/items/alerts/{id}": {
        /**
         * Retrieve an Item
         * @description Retrieve a single alerts item by unique identifier.
         */
        get: operations["readSingleItemsAlerts"];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        Query: {
            /**
             * @description Control what fields are being returned in the object.
             * @example [
             *   "*",
             *   "*.*"
             * ]
             */
            fields?: string[];
            /**
             * @example {
             *   "<field>": {
             *     "<operator>": "<value>"
             *   }
             * }
             */
            filter?: Record<string, never>;
            /** @description Filter by items that contain the given search query in one of their fields. */
            search?: string;
            /**
             * @description How to sort the returned items.
             * @example [
             *   "-date_created"
             * ]
             */
            sort?: string[];
            /** @description Set the maximum number of items that will be returned */
            limit?: number;
            /** @description How many items to skip when fetching data. */
            offset?: number;
            /** @description Cursor for use in pagination. Often used in combination with limit. */
            page?: number;
            /**
             * @description Deep allows you to set any of the other query parameters on a nested relational dataset.
             * @example {
             *   "related_articles": {
             *     "_limit": 3
             *   }
             * }
             */
            deep?: Record<string, never>;
        };
        "x-metadata": {
            /** @description Returns the total item count of the collection you're querying. */
            total_count?: number;
            /** @description Returns the item count of the collection you're querying, taking the current filter/search parameters into account. */
            filter_count?: number;
        };
        Files: {
            /**
             * @description Unique identifier for the file.
             * @example 8cbb43fe-4cdf-4991-8352-c461779cec02
             */
            id?: string;
            /**
             * @description Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).
             * @example local
             */
            storage?: string;
            /**
             * @description Name of the file on disk. By default, Directus uses a random hash for the filename.
             * @example a88c3b72-ac58-5436-a4ec-b2858531333a.jpg
             */
            filename_disk?: string;
            /**
             * @description How you want to the file to be named when it's being downloaded.
             * @example avatar.jpg
             */
            filename_download?: string;
            /**
             * @description Title for the file. Is extracted from the filename on upload, but can be edited by the user.
             * @example User Avatar
             */
            title?: string;
            /**
             * @description MIME type of the file.
             * @example image/jpeg
             */
            type?: string;
            /**
             * @description Virtual folder where this file resides in.
             * @example null
             */
            folder?: string | components["schemas"]["Folders"] | null;
            /**
             * @description Who uploaded the file.
             * @example 63716273-0f29-4648-8a2a-2af2948f6f78
             */
            uploaded_by?: string | components["schemas"]["Users"];
            /**
             * Format: date-time
             * @description When the file was uploaded.
             * @example 2019-12-03T00:10:15+00:00
             */
            uploaded_on?: string;
            /** Format: uuid */
            modified_by?: string | null;
            /** Format: timestamp */
            modified_on?: string;
            /**
             * @description Character set of the file.
             * @example binary
             */
            charset?: string | null;
            /**
             * @description Size of the file in bytes.
             * @example 137862
             */
            filesize?: number;
            /**
             * @description Width of the file in pixels. Only applies to images.
             * @example 800
             */
            width?: number | null;
            /**
             * @description Height of the file in pixels. Only applies to images.
             * @example 838
             */
            height?: number | null;
            /**
             * @description Duration of the file in seconds. Only applies to audio and video.
             * @example 0
             */
            duration?: number | null;
            /**
             * @description Where the file was embedded from.
             * @example null
             */
            embed?: string | null;
            /** @description Description for the file. */
            description?: string | null;
            /** @description Where the file was created. Is automatically populated based on EXIF data for images. */
            location?: string | null;
            /** @description Tags for the file. Is automatically populated based on EXIF data for images. */
            tags?: string[] | null;
            /** @description IPTC, EXIF, and ICC metadata extracted from file */
            metadata?: unknown;
        };
        ItemsArticlesTranslations: {
            id?: number;
            articles_id?: string | components["schemas"]["ItemsArticles"] | null;
            languages_id?: string | null;
            title?: string | null;
            slug?: string | null;
            content?: string | null;
            excerpt?: string | null;
        };
        ItemsArticlesArticles: {
            id?: number;
            articles_id?: string | components["schemas"]["ItemsArticles"] | null;
            related_articles_id?: string | components["schemas"]["ItemsArticles"] | null;
        };
        ItemsArticlesFiles: {
            id?: number;
            articles_id?: string | components["schemas"]["ItemsArticles"] | null;
            directus_files_id?: string | components["schemas"]["Files"] | null;
        };
        ItemsArticles: {
            /** Format: uuid */
            id?: string;
            status?: string;
            sort?: number | null;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            views?: number | null;
            thumbnail?: string | components["schemas"]["Files"] | null;
            reading_time?: number | null;
            translations?: ((number | components["schemas"]["ItemsArticlesTranslations"])[]) | null;
            related_articles?: ((number | components["schemas"]["ItemsArticlesArticles"])[]) | null;
            attachments?: ((number | components["schemas"]["ItemsArticlesFiles"])[]) | null;
        };
        ItemsProjects: {
            /** Format: uuid */
            id?: string;
            status?: string;
            sort?: number | null;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            end_date?: string | null;
            url?: string | null;
            icon?: string | components["schemas"]["Files"] | null;
            translations?: ((number | components["schemas"]["ItemsProjectsTranslations"])[]) | null;
        };
        ItemsPrivacy: {
            /** Format: uuid */
            id?: string;
            status?: string;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            translations?: ((number | components["schemas"]["ItemsPrivacyTranslations"])[]) | null;
        };
        ItemsReferencesTranslations: {
            id?: number;
            references_id?: string | components["schemas"]["ItemsReferences"] | null;
            languages_code?: string | null;
            title?: string | null;
            excerpt?: string | null;
        };
        ItemsPrivacyTranslations: {
            id?: number;
            privacy_id?: string | components["schemas"]["ItemsPrivacy"] | null;
            languages_code?: string | null;
            content?: string | null;
        };
        ItemsProjectsTranslations: {
            id?: number;
            projects_id?: string | components["schemas"]["ItemsProjects"] | null;
            languages_code?: string | null;
            title?: string | null;
            subtitle?: string | null;
            excerpt?: string | null;
        };
        ItemsImprintTranslations: {
            id?: number;
            imprint_id?: string | components["schemas"]["ItemsImprint"] | null;
            languages_code?: string | null;
            content?: string | null;
        };
        ItemsImprint: {
            /** Format: uuid */
            id?: string;
            status?: string;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            translations?: ((number | components["schemas"]["ItemsImprintTranslations"])[]) | null;
        };
        ItemsContact: {
            /** Format: uuid */
            id?: string;
            status?: string;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            email?: string | null;
            phone?: string | null;
            name?: string | null;
            address?: string | null;
            city?: string | null;
            country?: string | null;
            github?: string | null;
            linkedin?: string | null;
            private_site?: string | null;
            location_url?: string | null;
        };
        ItemsReferencesFiles: {
            id?: number;
            references_id?: string | components["schemas"]["ItemsReferences"] | null;
            directus_files_id?: string | components["schemas"]["Files"] | null;
        };
        ItemsReferences: {
            /** Format: uuid */
            id?: string;
            status?: string;
            sort?: number | null;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            end_date?: string | null;
            icon?: string | components["schemas"]["Files"] | null;
            url?: string | null;
            translations?: ((number | components["schemas"]["ItemsReferencesTranslations"])[]) | null;
            assets?: ((number | components["schemas"]["ItemsReferencesFiles"])[]) | null;
        };
        ItemsReports: {
            /** Format: uuid */
            id?: string;
            status?: string;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            rating?: number | null;
            name?: string | null;
            translations?: ((number | components["schemas"]["ItemsReportsTranslations"])[]) | null;
        };
        ItemsReportsTranslations: {
            id?: number;
            reports_id?: string | components["schemas"]["ItemsReports"] | null;
            languages_code?: string | null;
            content?: string | null;
        };
        ItemsProcesses: {
            /** Format: uuid */
            id?: string;
            status?: string;
            sort?: number | null;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            image?: string | components["schemas"]["Files"] | null;
            translations?: ((number | components["schemas"]["ItemsProcessesTranslations"])[]) | null;
        };
        ItemsStatistics: {
            /** Format: uuid */
            id?: string;
            status?: string;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            customers?: number | null;
            years_experience?: number | null;
            realized_projects?: number | null;
        };
        ItemsProgrammingTools: {
            /** Format: uuid */
            id?: string;
            status?: string | null;
            sort?: number | null;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            title?: string | null;
            color?: string | null;
            icon?: string | components["schemas"]["Files"] | null;
            type?: string | null;
            url?: string | null;
            contrast_color?: string | null;
        };
        ItemsTextsTranslations: {
            id?: number;
            texts_id?: string | components["schemas"]["ItemsTexts"] | null;
            languages_code?: string | null;
            content?: string | null;
        };
        ItemsTexts: {
            /** Format: uuid */
            id?: string;
            status?: string | null;
            sort?: number | null;
            /** Format: uuid */
            user_created?: string | null;
            /** Format: timestamp */
            date_created?: string | null;
            /** Format: uuid */
            user_updated?: string | null;
            /** Format: timestamp */
            date_updated?: string | null;
            key?: string | null;
            translations?: ((number | components["schemas"]["ItemsTextsTranslations"])[]) | null;
        };
        ItemsAlertsTranslations: {
            id?: number;
            /** Format: uuid */
            alerts_id?: string | null;
            languages_code?: string | null;
            title?: string | null;
            content?: string | null;
        };
        ItemsProcessesTranslations: {
            id?: number;
            processes_id?: string | components["schemas"]["ItemsProcesses"] | null;
            languages_code?: string | null;
            title?: string | null;
            content?: string | null;
        };
        ItemsAlerts: Record<string, never>;
    };
    responses: {
        /** @description Error: Not found. */
        NotFoundError: {
            content: {
                "application/json": {
                    error?: {
                        /** Format: int64 */
                        code?: number;
                        message?: string;
                    };
                };
            };
        };
        /** @description Error: Unauthorized request */
        UnauthorizedError: {
            content: {
                "application/json": {
                    error?: {
                        /** Format: int64 */
                        code?: number;
                        message?: string;
                    };
                };
            };
        };
    };
    parameters: {
        /** @description Index */
        Id: number;
        /** @description Unique identifier for the object. */
        UUId: string;
        /** @description Collection of which you want to retrieve the items from. */
        Collection: string;
        /** @description Filter by items that contain the given search query in one of their fields. */
        Search?: string;
        /** @description Cursor for use in pagination. Often used in combination with limit. */
        Page?: number;
        /** @description How many items to skip when fetching data. */
        Offset?: number;
        /** @description How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly. */
        Sort?: string[];
        /** @description What metadata to return in the response. */
        Meta?: string;
        /** @description A limit on the number of objects that are returned. */
        Limit?: number;
        /** @description Select items in collection by given conditions. */
        Filter?: string[];
        /** @description Control what fields are being returned in the object. */
        Fields?: string[];
        /** @description Controls if the API sets a cookie or returns a JWT on successful login. */
        Mode: "jwt" | "cookie";
        /** @description Saves the API response to a file. Accepts one of "csv", "json", "xml", "yaml". */
        Export?: "csv" | "json" | "xml" | "yaml";
        /** @description Retrieve an item's state from a specific Content Version. The value corresponds to the "key" of the Content Version. */
        Version?: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

    /**
     * Get an Asset
     * @description Image typed files can be dynamically resized and transformed to fit any need.
     */
    getAsset: {
        parameters: {
            query?: {
                /** @description The key of the asset size configured in settings. */
                key?: string;
                /** @description A JSON array of image transformations */
                transforms?: string;
                /** @description Download the asset to your computer */
                download?: boolean;
            };
            path: {
                /** @description The id of the file. */
                id: string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "text/plain": string;
                };
            };
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * Retrieve a Temporary Access Token
     * @description Retrieve a Temporary Access Token
     */
    login: {
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Email address of the user you're retrieving the access token for.
                     * @example admin@example.com
                     */
                    email: string;
                    /**
                     * Format: password
                     * @description Password of the user.
                     * @example password
                     */
                    password: string;
                    /**
                     * @description Choose between retrieving the token as a string, or setting it as a cookie.
                     * @default json
                     * @enum {string}
                     */
                    mode?: "json" | "cookie";
                    /** @description If 2FA is enabled, you need to pass the one time password. */
                    otp?: string;
                };
            };
        };
        responses: {
            /** @description Successful authentification */
            200: {
                content: {
                    "application/json": {
                        data?: {
                            /** @example eyJhbGciOiJI... */
                            access_token?: string;
                            /** @example 900 */
                            expires?: number;
                            /** @example yuOJkjdPXMd... */
                            refresh_token?: string;
                        };
                    };
                };
            };
        };
    };
    /**
     * Refresh Token
     * @description Refresh a Temporary Access Token.
     */
    refresh: {
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description JWT access token you want to refresh. This token can't be expired.
                     * @example eyJ0eXAiOiJKV...
                     */
                    refresh_token?: string;
                };
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: {
                            /** @example eyJhbGciOiJI... */
                            access_token?: string;
                            /** @example 900 */
                            expires?: number;
                            /** @example Gy-caJMpmGTA... */
                            refresh_token?: string;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Log Out
     * @description Log Out
     */
    logout: {
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description JWT access token you want to logout.
                     * @example eyJ0eXAiOiJKV...
                     */
                    refresh_token?: string;
                };
            };
        };
        responses: {
            /** @description Request successful */
            200: {
                content: never;
            };
        };
    };
    /**
     * Request a Password Reset
     * @description Request a reset password email to be send.
     */
    passwordRequest: {
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Email address of the user you're requesting a reset for.
                     * @example admin@example.com
                     */
                    email: string;
                };
            };
        };
        responses: {
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Reset a Password
     * @description The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.
     */
    passwordReset: {
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description One-time use JWT token that is used to verify the user.
                     * @example eyJ0eXAiOiJKV1Qi...
                     */
                    token: string;
                    /**
                     * Format: password
                     * @description New password for the user.
                     * @example password
                     */
                    password: string;
                };
            };
        };
        responses: {
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * List OAuth Providers
     * @description List configured OAuth providers.
     */
    oauth: {
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        public?: boolean;
                        /**
                         * @example [
                         *   "github",
                         *   "facebook"
                         * ]
                         */
                        data?: string[];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Authenticated using an OAuth provider
     * @description Start OAuth flow using the specified provider
     */
    oauthProvider: {
        parameters: {
            query?: {
                /** @description Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned. */
                redirect?: string;
            };
            path: {
                /** @description Key of the activated OAuth provider. */
                provider: string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        public?: boolean;
                        data?: {
                            token?: string;
                        };
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * System Info
     * @description Perform a system status check and return the options.
     */
    serverInfo: {
        parameters: {
            query: {
                /** @description The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server. */
                super_admin_token: number;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: Record<string, never>;
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * Ping
     * @description Ping, pong. Ping.. pong.
     */
    ping: {
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/text": string;
                };
            };
        };
    };
    /**
     * List Files
     * @description List the files.
     */
    getFiles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
                meta?: components["parameters"]["Meta"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["Files"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve a Files
     * @description Retrieve a single file by unique identifier.
     */
    getFile: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
            };
            path: {
                id: components["parameters"]["UUId"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["Files"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * List Items
     * @description List the articles_translations items.
     */
    readItemsArticlesTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsArticlesTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single articles_translations item by unique identifier.
     */
    readSingleItemsArticlesTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsArticlesTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the articles_articles items.
     */
    readItemsArticlesArticles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsArticlesArticles"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single articles_articles item by unique identifier.
     */
    readSingleItemsArticlesArticles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsArticlesArticles"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the articles_files items.
     */
    readItemsArticlesFiles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsArticlesFiles"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single articles_files item by unique identifier.
     */
    readSingleItemsArticlesFiles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsArticlesFiles"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the articles items.
     */
    readItemsArticles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsArticles"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single articles item by unique identifier.
     */
    readSingleItemsArticles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsArticles"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the projects items.
     */
    readItemsProjects: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProjects"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single projects item by unique identifier.
     */
    readSingleItemsProjects: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProjects"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the privacy items.
     */
    readItemsPrivacy: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsPrivacy"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single privacy item by unique identifier.
     */
    readSingleItemsPrivacy: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsPrivacy"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the references_translations items.
     */
    readItemsReferencesTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReferencesTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single references_translations item by unique identifier.
     */
    readSingleItemsReferencesTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReferencesTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the privacy_translations items.
     */
    readItemsPrivacyTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsPrivacyTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single privacy_translations item by unique identifier.
     */
    readSingleItemsPrivacyTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsPrivacyTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the projects_translations items.
     */
    readItemsProjectsTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProjectsTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single projects_translations item by unique identifier.
     */
    readSingleItemsProjectsTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProjectsTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the imprint_translations items.
     */
    readItemsImprintTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsImprintTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single imprint_translations item by unique identifier.
     */
    readSingleItemsImprintTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsImprintTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the imprint items.
     */
    readItemsImprint: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsImprint"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single imprint item by unique identifier.
     */
    readSingleItemsImprint: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsImprint"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the contact items.
     */
    readItemsContact: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsContact"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single contact item by unique identifier.
     */
    readSingleItemsContact: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsContact"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the references_files items.
     */
    readItemsReferencesFiles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReferencesFiles"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single references_files item by unique identifier.
     */
    readSingleItemsReferencesFiles: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReferencesFiles"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the references items.
     */
    readItemsReferences: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReferences"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single references item by unique identifier.
     */
    readSingleItemsReferences: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReferences"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the reports items.
     */
    readItemsReports: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReports"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single reports item by unique identifier.
     */
    readSingleItemsReports: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReports"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the reports_translations items.
     */
    readItemsReportsTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReportsTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single reports_translations item by unique identifier.
     */
    readSingleItemsReportsTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsReportsTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the processes items.
     */
    readItemsProcesses: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProcesses"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single processes item by unique identifier.
     */
    readSingleItemsProcesses: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProcesses"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the statistics items.
     */
    readItemsStatistics: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsStatistics"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single statistics item by unique identifier.
     */
    readSingleItemsStatistics: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsStatistics"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the programming_tools items.
     */
    readItemsProgrammingTools: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProgrammingTools"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single programming_tools item by unique identifier.
     */
    readSingleItemsProgrammingTools: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProgrammingTools"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the texts_translations items.
     */
    readItemsTextsTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsTextsTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single texts_translations item by unique identifier.
     */
    readSingleItemsTextsTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsTextsTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the texts items.
     */
    readItemsTexts: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsTexts"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single texts item by unique identifier.
     */
    readSingleItemsTexts: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsTexts"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the alerts_translations items.
     */
    readItemsAlertsTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsAlertsTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single alerts_translations item by unique identifier.
     */
    readSingleItemsAlertsTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsAlertsTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the processes_translations items.
     */
    readItemsProcessesTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProcessesTranslations"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single processes_translations item by unique identifier.
     */
    readSingleItemsProcessesTranslations: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsProcessesTranslations"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    /**
     * List Items
     * @description List the alerts items.
     */
    readItemsAlerts: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                limit?: components["parameters"]["Limit"];
                meta?: components["parameters"]["Meta"];
                offset?: components["parameters"]["Offset"];
                sort?: components["parameters"]["Sort"];
                filter?: components["parameters"]["Filter"];
                search?: components["parameters"]["Search"];
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsAlerts"][];
                        meta?: components["schemas"]["x-metadata"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    /**
     * Retrieve an Item
     * @description Retrieve a single alerts item by unique identifier.
     */
    readSingleItemsAlerts: {
        parameters: {
            query?: {
                fields?: components["parameters"]["Fields"];
                meta?: components["parameters"]["Meta"];
                version?: components["parameters"]["Version"];
            };
            path: {
                /** @description Index of the item. */
                id: number | string;
            };
        };
        responses: {
            /** @description Successful request */
            200: {
                content: {
                    "application/json": {
                        data?: components["schemas"]["ItemsAlerts"];
                    };
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
}
